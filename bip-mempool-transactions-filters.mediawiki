<pre>
  BIP: Mempool transactions filters for Light Clients
  Layer: Peer Services
  Title: Mempool transactions filters for Light Clients
  Author: Aleksey Karpov <admin@bitaps.com>
  Comments-Summary: None yet
  Comments-URI: 
  Status: Draft
  Type: Standards Track
  Created: 2019-09-26
  License: CC0-1.0
</pre>


== Abstract ==

This BIP describes a new addition to light client protocol defined in BIP 157. Block filters is privacy
safe approach to keep light clients synchronized but unlike BIP 37,  BIP 157  not allow to apply filters to 
mempool and check announcements for zero-confirmation transactions. 


== Motivation ==

BIP 157 is missed functionality to filter unconfirmed transactions, this means that Light client refused to use BIP 37 
due to privacy issues can process unconfirmed transactions only when loading the entire mempool transaction flow. 

Daily transaction volume in Bitcoin blockchain is about 200,000 - 300,000 transactions and no less than 150 Mb of data.
This is the significant daily volume of traffic for a wallet on a smartphone at example. Mempool filters this is not 
just user friendly fast notification about new transactions. This BIP described protocol improvement give ability 
for light clients do not download full blocks in case affected addresses in block detected and request short transactions
filters only exactly needed full transactions.

<pre>
  BIP: Mempool transactions filters for Light Clients
  Layer: Peer Services
  Title: Mempool transactions filters for Light Clients
  Author: Aleksey Karpov <admin@bitaps.com>
  Comments-Summary: None yet
  Comments-URI: 
  Status: Draft
  Type: Standards Track
  Created: 2019-09-20
  License: CC0-1.0
</pre>


== Abstract ==

This BIP describes a new addition to light client protocol defined in BIP 157. Block filters is privacy
safe approach to keep light clients synchronized but unlike BIP 37,  BIP 157  not allow to apply filters to 
mempool and check announcements for zero-confirm transactions. 


== Motivation ==

BIP 157 is missed functionality to filter unconfirmed transactions, this means that Light client refused to use BIP 37 
due to privacy issues can process unconfirmed transactions only when loading the entire mempool transaction flow. 

Daily transaction volume in Bitcoin blockchain is about 200,000 - 300,000 transactions and no less than 150 Mb of data.
This is the significant daily volume of traffic for a wallet on a smartphone at example. Mempool filters this is not 
just user friendly fast notification about new transactions. New P2P messages described in this BIP improve
protocol and give ability for light clients request short transactions filters and  exactly needed full transactions 
instead of download full blocks.

== Specification ==

=== New messages ===


==== gettxfilters ====

The gettxfilter message is used to request transactions by 256-bit transaction IDs with the specified filters to apply. 
ID length filed define length of transaction ID in bytes, 32 bytes means full transaction ID, 6 bytes means short transactions IDs as defined in BIP 152 or 16 bytes truncated wtx_id hash.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 1 || ID length || uint8_t || Transaction ID length in bytes
|-
| 1-5  || filter type || var_int || Applied filter types
|-
| 1-5 || Elements count || var_int || Number of transaction IDs entries
|-
| variable  || transaction ID || List of byte[] || List of transaction IDs 
|}


==== txfilter ====

txfilter is sent in response to gettxfilters, one for each transaction in the requested list. The message contains the following fields:

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32 || transaction ID || byte[32] || Full transaction ID 
|-
| 1-5 || filter size || var_int || Filter length in bytes
|-
| variable  || filter || byte[] || GCS filter
|}

Filter types defined in BIP-block-batch-filters and determine which data is included in a transaction GCS filter.

==== gettxfilters ====

The gettxfilter message is used to request transactions by 256-bit transaction IDs with the specified filters to apply. 
ID length filed define length of transaction ID in bytes, 32 bytes means full transaction ID, 6 bytes means short transactions IDs as defined in BIP 152 or 16 bytes truncated wtx_id hash.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 1 || ID length || uint8_t || Transaction ID length in bytes
|-
| 1-5  || filter type || var_int || Applied filter types
|-
| 1-5 || Elements count || var_int || Number of transaction IDs entries
|-
| variable  || transaction ID || List of byte[] || List of transaction IDs 
|}


==== getcfproof ====

The getfilterproof message is used to request merkle proof to verify commitment as merkle root of merkle tree constructed from headers of all types of filters. In case the light client downloads all types filters and keep information about the prevoius block filters, the commitment can be calculated independently.

Merkle proof is sequence of 32 byte hashesh necessary to build the path to the root from requested fiter types.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 1-5  || filter type || var_int || Filter types
|}

==== cfproof ====


{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| variable  || merkle path || byte[] || sequence of 32 byte hashesh necessary to build the path to root 
|}


=== Synchronization protocol flow ===

Mempool transactions filters in combination with  BIP 152 allow light clients syncronize blockchain without downloading full 
blocks.   

<img src=bip-mempool-transactions-filters/schema_a.png></img>

The above diagram shows an example with set of unconfirmed transactions {A, B, C, D, E}. Transactions B and E is affected for 
light client. 

On fisrt part shown how light clinet respon for new transaction announces, requesting transaction filters that are significantly smaller than the transactions themselves. In case positive test on received filter, light client request full transaction data.

The second part shows the process of synchronizing a new block. Full node send <code>cmpctblock</code> message with blocks header and short transaction IDs. Light client request missed transactions fiters {C,D,E} then request transactions affected in filters {E} and coinbase transaction. We need coinbase transaction downloaded to retrive witness commitment and block filters commitment. In case light client uses filter only certain types on additional comunication round required with message <code>getcfproof</code> to retrive merkle proof to commitment.

One of the important point this schema is comparison between block filters and received transaction filters. The count of affected duplicated elements MUST BE equal, in duplicated elements filter structure provided sequence with duplicates counters. In case this condition is not met, this means that same transaction filters hiding payments, because block filters verified via commitment. In this situation light client MUST download full block find transaction with invalid filters and bun malicious node who sent this.


Described schema in part of commitment verification works only if in future soft-fork filters commitment will be included in block validation rules. Currently light client nodes trusting that full nodes do not hiding payments, this applies to both BIP 37 and BIP 157. 


=== Transaction filter ===

