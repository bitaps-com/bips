<pre>
  BIP: Mempool transactions filters for Light Clients
  Layer: Peer Services
  Title: Mempool transactions filters for Light Clients
  Author: Aleksey Karpov <admin@bitaps.com>
  Comments-Summary: None yet
  Comments-URI: 
  Status: Draft
  Type: Standards Track
  Created: 2019-09-26
  License: PD
</pre>


== Abstract ==

This BIP describes a new addition to light client protocol defined in BIP 157. Block filters is privacy
safe approach to keep light clients synchronized but unlike BIP 37,  BIP 157  not allow to apply filters to 
mempool and check announcements for zero-confirmation transactions. 


== Motivation ==

BIP 157 is missed functionality to filter unconfirmed transactions. Light client that refused to use BIP 37 
due to privacy leaks can process unconfirmed transactions only one way and this is loading the entire mempool transaction flow. 

Daily transaction volume in Bitcoin blockchain is about 200,000 - 300,000 transactions and no less than 150 Mb of data.
This is the significant daily volume of traffic for a light wallets. Described in this BIP mempool transactions filters, 
it is not just for convenient notification of new transactions. Transactions filters improvement give ability 
for light clients instead of loading full blocks, simply request short transaction filters and full transactions only for the affected addresses. This approach consumes less bandwidth than loading full blocks and serving the entire flow of unconfirmed transactions.

== Specification ==

=== New messages ===

==== gettxfilters ====

The gettxfilter message is used to request transactions filter by transaction IDs with the specified filter types to apply. 
Transaction ID is 6 bytes means short transactions IDs as defined in BIP 152. Filter types defined in BIP-block-batch-filters.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 1  || filter type || byte  || Applied filter types
|-
| 1-5 || Elements count || var_int || Number of transaction IDs entries
|-
| variable  || transaction ID || List of byte[] || List of transaction IDs 
|}


==== txfilter ====

<code>txfilter</code> is sent in response to <code>gettxfilters</code>, one for each transaction in the requested list. The message contains the following fields:

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32 || transaction ID || byte[32] || Full transaction ID 
|-
| 1  || filter type || byte  || Applied filter types
|-
| variable  || filter || byte[] || transaction filter
|}

<code>filter type</code> may not be the same as requested MUST contains only combinations of requested and existed filters in requested transaction.

==== getcfproof ====

The getcfproof message is used to request merkle proof to verify commitment as merkle root of merkle tree constructed from headers of all types of filters. In case the light client downloads all types filters and keep information about the previous block filters, the commitment can be calculated independently.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32  || block hash || byte[32] || Block hash
|}

==== cfproof ====

Compact filters proof is sequence of 32 byte hashes necessary to build merkle tree. Merkle root from constructed merkle tree 
is block filters commitment.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32  || block hash || byte[32] || Block hash
|-
| 1  || filter type || byte  || Filter types for merkle tree
| variable  || filter headers || byte[] || sequence of 32 byte headers necessary to build merkle tree
|}




=== Synchronization protocol flow ===

Mempool transactions filters in combination with  BIP 152 allow light clients syncronize blockchain without downloading full 
blocks.   

<img src=bip-mempool-transactions-filters/schema_c.png></img>

The above diagram shows an example with set of unconfirmed transactions {A, B, C, D, E}. Transactions B and E is affected for 
light client. 

On fisrt part shown how light client respond for new transactions announces, requesting transaction filters that are significantly smaller than the transactions themselves. In case positive test on received filter, light client request full transaction data.

The second part shows the process of synchronizing a new block. Full node send <code>cmpctblock</code> message with block header and short transaction IDs. Light client request missed transaction filters {C, D, E}, then request transactions affected in filters {E} and coinbase transaction. We need coinbase transaction downloaded to retrive witness commitment and block filters commitment. In case light client uses filter only certain types one additional comunication round required with message <code>getcfproof</code> to retrive merkle proof to filter commitment.

Last step is construct block filters from transactions filters and calculate commitment using merkle proof. Calculated commitment and commitment from coinbase transactions MUST be the same. In case this condition is not met, this means that same transaction filters hiding payments. In this situation light client MUST download full block, find transaction with invalid filters and ban malicious node who sent this.

Described schema in part of commitment verification, works only if commitment included in block validation rules. This is required soft-fork and will be good improvement for light client protocol security in future. Currently light client nodes trusting that most full nodes do not hiding payments, this applies to both BIP 37 and BIP 157. Commitment verificatin part should be ignored for now and the strategy to mitigate hiding payments attack is use private full nodes or request block filters from several independent nodes. 


=== Transaction filter ===

This BIP defines list of transaction filter types:

* <code>P2PK - 1</code>
* <code>P2PKH - 2</code>
* <code>P2SH - 4</code>
* <code>P2WPKH - 8</code>
* <code>P2WPSH - 16</code>

Filter types support filter combinations and script types correspond BIP-Block-Batch-Filters


==== Filters contents ====

Transaction filters contain set of UNIQUE items derived from transaction inputs and outputs hashes for standard script types (pubkey hashes, script hashes). Coinbase inputs are not used. This information is minimum sufficient for light wallet to sync blockchain. Script/Pubkey hashes is choosen instead of raw script because output script canâ€™t be recovered for P2PK addresses in case no information about public key. This means that watch only wallet, with imported P2PK addresses from base58 format, not able to reconstruct output script without downloading transactions where this script was seen first time and will not be able to check filters.

For each filter element (Script/Pubkey hash) applied sipHash function and result mapped into range  [0, F). Implementations of this BIP MUST use the SipHash parameters c = 2 and d = 4 and 128-bit key k = 0. For mapping set of sipHash result integers within the range [0, F) used constant parameter F= 2 ^ 32 and function map_into_range, the same as used in BIP 158. All filter elements then are in ascending order and serialize to byte string where each element represented as 4 bytes.


==== Filter structure ====

{|
! Field Name !! Type !! Size  || Purpose
|-
| number_of_filter_bytes || var_int ||  1 - 5 bytes || A variable length integer representing the size of the transaction filter in bytes
|-
| filter || Binary blob || variable || serialized filter elements
|}


== Compatibility ==

Older clients remain fully compatible and interoperable after this change. 

Clients which do not implement this BIP remain fully compatible after this change using existing protocols, because this is 
additional node service and changes not affected to exist protocol.

== Reference Implementation ==
TODO

== Copyright ==

This document is placed in the public domain.



